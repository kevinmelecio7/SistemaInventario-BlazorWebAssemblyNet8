@page "/reporteComparativo"
@using System.Globalization;
<AuthorizeView Roles="Admin">
    <NotAuthorized>
        <NotAuthorizedPage />
    </NotAuthorized>
    <Authorized>
        <h3>Reporte Plan Comparativo Periodo </h3>

        <RadzenStack class="rz-p-0 rz-p-md-6 rz-p-lg-12">
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenChart>
                        <RadzenColumnSeries Data="@PZinicial" CategoryProperty="periodo" Title="Cantidad Inicial" LineType="LineType.Dashed" ValueProperty="cantidad">
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenColumnSeries>
                        <RadzenColumnSeries Data="@PZcontado" CategoryProperty="periodo" Title="Cantidad Contada" ValueProperty="cantidad">
                            <RadzenSeriesDataLabels Visible="true" />
                        </RadzenColumnSeries>
                        <RadzenColumnOptions Radius="10" />
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Cantidad en PZ" />
                        </RadzenValueAxis> 
                    </RadzenChart>
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow>
                <RadzenColumn Size="12">
                    <RadzenChart>
                        <RadzenChartTooltipOptions Shared="true" />
                        <RadzenLineSeries Smooth="true" Data="@PZinicial" CategoryProperty="periodo" Title="Importe Inicial" LineType="LineType.Dashed" ValueProperty="importe">
                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Square" />
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenLineSeries>
                        <RadzenLineSeries Smooth="true" Data="@PZcontado" CategoryProperty="periodo" Title="Importe Contado" ValueProperty="importe">
                            <RadzenMarkers Visible="true" MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="20" />
                        <RadzenValueAxis Formatter="@FormatAsUSD">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Importe" />
                        </RadzenValueAxis> 
                    </RadzenChart>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </Authorized>
</AuthorizeView>


@code {

    DataItem[] PZinicial = new DataItem[0];
    DataItem[] PZcontado = new DataItem[0];


    private List<PeriodoDTO> listPeriodo = new List<PeriodoDTO>();
    private List<ReporteDTO> listReporte = new List<ReporteDTO>();

    string periodo = string.Empty;

    string? periodoP1;
    double inicialP1;
    double contadoP1;

    string? periodoP2;
    double inicialP2;
    double contadoP2;

    string? periodoP3;
    double inicialP3;
    double contadoP3;


    [Inject]
    private InputsDataService InputsDataService { get; set; }

    // Este método se ejecuta automáticamente al inicializar el componente.
    // Realiza la carga de periodos desde la base de datos, procesa los datos de los últimos 6 periodos(o menos si no hay suficientes), 
    // calcula sumatorias de cantidades e importes, y construye dos arreglos(PZinicial y PZcontado) 
    // que servirán para visualizar o analizar comparativamente la información precargada y contada.
    protected override async Task OnInitializedAsync()
    {
        Loading.Show();
        // 1. Obtener la lista de periodos disponibles desde el servicio de datos
        listPeriodo = await InputsDataService.GetPeriodoAsync();
        // 2. Formatear cada periodo, agregando el identificador si existe
        foreach (var item in listPeriodo)
        {
            if (item.identificador != "")
            {
                item.periodo = $"{item.periodo}, {item.consecutivo}-{item.identificador}";
            }

        }
        
        // 3. Inicializar listas temporales para almacenar datos agregados
        List<string> periodosData = new List<string>();
        List<double> CinicialData = new List<double>();
        List<double> CcontadaData = new List<double>();
        List<double> IinicialData = new List<double>();
        List<double> IcontadaData = new List<double>();

        // 4. Definir cuántos periodos se van a analizar (máximo 6)
        int repeticiones = 0;
        if(listPeriodo.Count() >= 6)
        {
            repeticiones = 6;
        } else
        {
            repeticiones = listPeriodo.Count();
        }

        // 5. Recorrer los periodos seleccionados para acumular datos
        for(int i=0; i<repeticiones; i++)
        {
            double sumaInicial = 0;
            double sumaContado = 0;
            double sumaImpIncial = 0;
            double sumaImpContado = 0;
            periodo = listPeriodo[i].periodo!;
            // Obtener los reportes asociados al periodo
            listReporte = await InputsDataService.GetReportePorPeriodoAsync(periodo);
            // Verificar si hay datos que procesar
            if(listReporte.Count() != 0)
            {
                foreach (var report in listReporte)
                {
                    sumaInicial = sumaInicial + report.cantidad_inicial;
                    sumaContado = sumaContado + report.cantidad_contada;
                    sumaImpIncial = sumaImpIncial + report.importe_inicial;
                    sumaImpContado = sumaImpContado + report.importe_contada;
                }
                // Guardar los valores acumulados para ese periodo
                periodosData.Add(periodo);
                CinicialData.Add(sumaInicial);
                CcontadaData.Add(sumaContado);
                IinicialData.Add(sumaImpIncial);
                IcontadaData.Add(sumaImpContado);
            } 
        }

        // 6. Crear arreglos de objetos DataItem para representar los datos acumulados
        PZinicial = new DataItem[CinicialData.Count];
        PZcontado = new DataItem[CinicialData.Count];

        // 7. Poblar los arreglos con los datos ya agrupados por periodo
        for (int j = 0; j < CinicialData.Count; j++)
        {
            PZinicial[j] = new DataItem
                {
                    periodo = periodosData[j],
                    cantidad = CinicialData[j],
                    importe = IinicialData[j]
                };
            PZcontado[j] = new DataItem
                {
                    periodo = periodosData[j],
                    cantidad = CcontadaData[j],
                    importe = IcontadaData[j]
                };
        }
        Loading.Hide(); // Oculta el indicador de carga
    }


    class DataItem
    {
        public string? periodo { get; set; }
        public double cantidad{ get; set; }
        public double importe { get; set; }

    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }
}
