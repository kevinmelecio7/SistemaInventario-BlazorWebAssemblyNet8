@page "/registro"
<link rel="stylesheet" href="app.css" />

@* <style>
    .large-font-input {
            font-size: 60px !important; /* Tamaño de la letra */ /*
                padding: 40px !important; /* Espacio interno */ /*
        }
</style> *@

<AuthorizeView Roles="User">
    <NotAuthorized>
        <NotAuthorizedPage />
    </NotAuthorized>
    <Authorized>
        <h3>Registro</h3>

        <RadzenStack>
            <RadzenFieldset Text="Ingresa valores" class="rz-background-color-base-100">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.DisplayH6" class="rz-pt-1"> Numero de Parte </RadzenText>
                            <RadzenTextBox @bind-Value="materialNPTXT" @onkeydown=@(e => enter(e, 1)) @ref="materialTextBox" Disabled="enableMaterial" aria-label="Default TextBox" Placeholder="Ingresa Numero de Parte" class="form-control large-font-input" />
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenText TextStyle="TextStyle.DisplayH6" TextAlign="TextAlign.Left" class="rz-pt-1"><b> @descripcion </b>  </RadzenText>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.DisplayH6" class="rz-pt-1"> Storage Bin </RadzenText>
                            <RadzenTextBox @bind-Value="storageTXT" @onkeydown=@(e => enter(e, 2)) Style="width: 100%" Disabled="enableStorage" aria-label="Default TextBox" Placeholder="Ingresa Storage Bin" class="form-control large-font-input" />
                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>
        <br />
        @if (vacio)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display:block;" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">

                    <div class="modal-content">
                        <div class="modal-header border-bottom-0">
                            <h1 class="modal-title fs-5">PRECAUCION</h1>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex flex-row mb-3 align-items-center">
                                <img src="@Icon.WARNING" class="img-fluid" alt="Modal Icon" style="max-width: 50px; max-height: 50px;" />
                                <div class="p-2 fs-5">EL ADMINISTRADOR AUN NO HA ACTIVDADO EL PERIODO O AUN NO AGREGA LOS PARAMETROS PARA EL ESCANEO</div>
                            </div>
                            @if (Modal.MessageSecondary.Length != 0)
                            {
                                <div class="d-flex flex-row mb-3 align-items-center">
                                    <div class="p-2 fs-5">RECARGE LA PAGINA CUANDO SE LE NOTIFIQUE EL CAMBIO DE PERIODO</div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-@Message.WARNING" @onclick="() => btnHome()">ACEPTAR</button>
                        </div>
                    </div>
                </div>
            </div>
        }



        @* COLOCAR CONIDCION, SI NO EXISTE ALGUNO DE LOS DOS, MOSTRAR BOTON DE CAPTURA ADICIONAL*@
        @if (enableAdicional)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenText TextStyle="TextStyle.H6" class="rz-pt-2 rz-color-danger"><b> Los valores no existen en el reporte inicial o ya fueron registrados anteriormente. ¿Deseas realizar la captura adicional?  </b></RadzenText>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenButton Click="()=>modeCapturaAdicional()" Text="Captura Adicional" Icon="add_circle" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Large" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6">
                    <RadzenButton Click="()=>refresh()" Text="Intentar de nuevo" Icon="cancel" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Large" />
                </RadzenColumn>
            </RadzenRow>
            <br />
        }

        @if (capturaAdicional)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenColumn Size="12" SizeMD="4">
                    <RadzenText TextStyle="TextStyle.H5" class="rz-pt-2 rz-color-info"><b> Modo Captura Adicional </b> </RadzenText>
                </RadzenColumn>
            </RadzenRow>
        }




        @* COLOCAR CONDICION, SI EXISTE AMBOS VALORES, MOSTRAR CANTIDAD*@
        @if (enableGuardado)
        {
            <br />
            <RadzenStack>
                <RadzenFieldset Text="Ingresa Cantidad" class="rz-background-color-base-100">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenText TextStyle="TextStyle.DisplayH6" class="rz-pt-1"> Cantidad </RadzenText>
                            <RadzenTextBox @bind-Value="cantidad" Style="width: 100%" aria-label="Default TextBox" Placeholder="Ingresa Cantidad" class="form-control large-font-input" />
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
            <br />
            <RadzenStack Gap="1rem">
                <RadzenButton Click="()=>BuscaFolio()" Text="Guardar" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
                <br />
                <RadzenButton Click="()=>refresh()" Text="Realizar nueva captura" Icon="cancel" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Large" />
            </RadzenStack>
            <br />
            <br />
        }


         
        @* GUARDAR REGISTRO *@
        @if (seguroGuardar)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display:block;" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header border-bottom-0">
                            <h1 class="modal-title fs-5"><b>¿Estas seguro(a) de guardar?</b></h1>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex flex-row mb-3 align-items-center">

                                <img src="@Icon.INFORMATION" class="img-fluid" alt="Modal Icon" style="max-width: 50px; max-height: 50px;" />

                                <div class="p-2 fs-5">
                                    Se registrará <b>@cantidad PZ</b> del material <b>@descripcion</b> en el storage bin <b>@storageTXT</b>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-danger" @onclick="() => {seguroGuardar = false; folio = string.Empty;}">CANCELAR</button>
                            <button type="button" class="btn btn-primary" @onclick="() => Guardado()">ACEPTAR</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* *******   LOADING   ******* *@
        @if (Loading.showLoading)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display: block">
                <div class="modal-dialog modal-sm modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-body">
                            <div class="d-flex align-items-center start">
                                <div class="spinner-border" aria-hidden="true"></div>
                                <strong role="status" class="ps-3">@Loading.messageLoading</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* *******   MODAL   ******* *@
        @if (Modal.showModal)
        {
            <div class="modal fade show bg-black bg-opacity-50" style="display:block;" data-bs-backdrop="static" data-bs-keyboard="false">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header border-bottom-0">
                            <h1 class="modal-title fs-5">@Modal.TitleModal</h1>
                        </div>
                        <div class="modal-body">
                            <div class="d-flex flex-row mb-3 align-items-center">
                                @if (Modal.ModalIcon.Length != 0)
                                {
                                    <img src="@Modal.ModalIcon" class="img-fluid" alt="Modal Icon" style="max-width: 50px; max-height: 50px;" />
                                }
                                <div class="p-2 fs-5">@Modal.MessageModal</div>
                            </div>
                            @if (Modal.MessageSecondary.Length != 0)
                            {
                                <div class="d-flex flex-row mb-3 align-items-center">
                                    <div class="p-2 fs-5">@Modal.MessageSecondary</div>
                                </div>
                            }
                        </div>
                        <div class="modal-footer border-top-0">
                            <button type="button" class="btn btn-@(Modal.MessageType.Length != 0 ? Modal.MessageType.ToLower() :"light" )" @onclick="() => Modal.Hide()">ACEPTAR</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>


@code {
    private RadzenTextBox materialTextBox;

    string materialNPTXT = "";
    string descripcion = "";
    string storageTXT = "";
    string cantidad = "";
    string folio = string.Empty;

    bool enableMaterial = false;
    bool enableStorage = false;
    bool enableAdicional = false;
    bool enableGuardado = false;
    bool seguroGuardar = false;


    bool capturaAdicional = false;
    bool vacio = false;



    [Inject]
    private InputsDataService InputsDataService { get; set; }

    private List<PeriodoDTO> listPeriodo = new List<PeriodoDTO>();
    PeriodoDTO peridoActual = new PeriodoDTO();


    List<StorageBinDTO> listStorage = new List<StorageBinDTO>();
    StorageBinDTO storage = new StorageBinDTO();
    List<MasterDataDTO> listMaterial = new List<MasterDataDTO>();
    MasterDataDTO material = new MasterDataDTO();

    public class InitialMaterial
    {
        public string? MaterialNumber { get; set; }
        public string? MaterialDescription { get; set; }
    }

    public class InitialStorage
    {
        public string? StorageBin { get; set; }
    }


    string usuario = string.Empty;

    private DateTime lastKeyPressTime;
    private bool isScannerInput;

    /// <summary>
    /// Método que se ejecuta cuando el componente Blazor se inicializa.
    /// Carga los datos iniciales necesarios para operar, incluyendo periodos, almacenamiento,
    /// materiales, y datos del usuario autenticado.
    /// También verifica si se necesita generar folios para una carga inicial.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        Loading.Show();
        listPeriodo = await InputsDataService.GetPeriodoAsync();
        if (listPeriodo.Count() > 0 && listPeriodo[0].activo == 1)
        {
            vacio = false;
            peridoActual = listPeriodo[0]; // Establecer periodo actual
            listStorage = await InputsDataService.GetStorageAsync(listPeriodo[0].id); // Obtener Storages
            listMaterial = await InputsDataService.GetMasterDataAsync(listPeriodo[0].id); // Obtener materiales

            //obtener usuario
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                usuario = user.Identity.Name!;
            }

            // Verificar si ya existe un folio para los registros iniciales
            var listInitialFirst = await InputsDataService.GetInitialLoadFirstAsync(listPeriodo[0].id);
            if (listInitialFirst[0].estado == "" || listInitialFirst[0].estado is null)
            {
                //Si el estado estado no contiene un valor, significa que tampoco existen folios
                string result1 = await InputsDataService.UpdateInitialLoadFolioAsync(); //Actualizar la tabla "saldos_iniciales" y generar sus respectivos folios
                if (result1 == "Error")
                {
                    Modal.Show("ERROR AL GENERAR FOLIOS", "ERROR", Message.ERROR, Icon.ERROR);
                    Loading.Hide();
                    return;
                }
            }
        } 
        else
        {
            vacio = true;
        }
        Loading.Hide();
    }

    // Método que se ejecuta después de que se renderiza el componente por primera vez.
    // Establece el enfoque en el campo de texto del material.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await materialTextBox.FocusAsync();
        }
    }

    // Redirige al usuario a la página de inicio (home).
    private void btnHome()
    {
        NavManager.NavigateTo("home");
    }


    // <summary>
    // Evento que se ejecuta cuando el usuario presiona una tecla (Enter o Tab) en un campo de texto.
    // Realiza validaciones y transforma valores según ciertas reglas.
    // </summary>
    private async Task enter(KeyboardEventArgs e, int textbox)
    {
        if (e.Key == "Tab" || e.Key == "Enter")
        {
            Loading.Show();
            await Task.Delay(1500);
            Loading.Hide();
            // Remover 'P' inicial si existe en el número de parte
            if (materialNPTXT != "" && materialNPTXT[0] == 'P')
                materialNPTXT = materialNPTXT.Substring(1);

            // Remover ceros iniciales si existe en el código de almacenamiento
            if (storageTXT != "" && storageTXT[0] == '0' && storageTXT[1] == '0')
                storageTXT = storageTXT.Substring(3);

            await validarCamposTexto(textbox); // Validar campos relacionados
            Loading.Hide();
        }
    }

    // Valida los campos de texto según el textbox (1 = material, 2 = storage)
    private async Task validarCamposTexto(int textbox)
    {
        Loading.Show();
        if (capturaAdicional == false)
        {

            switch (textbox)
            {
                case 1:
                    // Busca descripción del material en carga inicial
                    var listInitialMaterial = await InputsDataService.GetInitialMaterialLoadAsync(listPeriodo[0].id, materialNPTXT);
                    if (listInitialMaterial.Count() > 0)
                    {
                        var material = listInitialMaterial.Where(x => x.material_number == materialNPTXT).FirstOrDefault();
                        descripcion = material!.material_description!;
                    }

                    // Valida si ambos campos tienen datos
                    if (storageTXT != "" && materialNPTXT != "")
                        await validarInitial(); // si ambos ya tienen valor, van a buscar relacion en la tabla saldos_iniciales
                    break;

                case 2:
                    if (storageTXT != "" && materialNPTXT != "")
                        await validarInitial(); // si ambos ya tienen valor, van a buscar relacion en la tabla saldos_iniciales
                    break;
            }
        } else {
            switch (textbox)
            {
                case 1:
                    // Busca material en listMaterial
                    material = listMaterial.Where(item => item.materialID == materialNPTXT).FirstOrDefault()!;
                    if (material is not null)
                    {
                        descripcion = material.descripcion!;
                    } else
                    {

                        Modal.Show($"EL NUMERO DE PARTE '{materialNPTXT}' NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING);
                        materialNPTXT = "";
                        Loading.Hide();
                        return;
                    }
                    // Valida si ambos campos tienen datos
                    if (storageTXT != "" && materialNPTXT != "")
                    {
                        await validarInitial();// si ambos ya tienen valor, van a buscar relacion en la tabla saldos_iniciales
                    }
                    break;


                case 2:
                    // Busca storage en listStorage
                    storage = listStorage.Where(item => item.storagebin == storageTXT).FirstOrDefault()!;
                    if(storage is null)
                    {

                        Modal.Show($"EL STORAGE BIN '{storageTXT}' NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING);
                        storageTXT = "";
                        Loading.Hide();
                        return;
                    }
                    // Valida si ambos campos tienen datos
                    if (storageTXT != "" && materialNPTXT != "")
                    {
                        await validarInitial();// si ambos ya tienen valor, van a buscar relacion en la tabla saldos_iniciales
                    }
                    break;
            }
        }
        Loading.Hide();
    }

    // Activa modo de captura adicional y valida existencia de material y storage
    private async Task modeCapturaAdicional()
    {
        capturaAdicional = true;
        enableAdicional = false;
        enableMaterial = false;
        enableStorage = false;
        material = listMaterial.Where(item => item.materialID == materialNPTXT).FirstOrDefault()!;
        storage = listStorage.Where(item => item.storagebin == storageTXT).FirstOrDefault()!;
        if (material is null && storage is null)
        {
            materialNPTXT = "";
            storageTXT = "";
            capturaAdicional = false;
            Modal.Show("NUMERO DE PARTE Y STORAGE BIN NO EXISTEN", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO NUMERO DE PARTE Y STORAGE BIN");
            return;
        }
        if(material is null)
        {
            materialNPTXT = "";
            capturaAdicional = false;
            Modal.Show("NUMERO DE PARTE NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO NUMERO DE PARTE");
            return;
        }
        if (storage is null)
        {
            storageTXT = "";
            capturaAdicional = false;
            Modal.Show("STORAGE BIN NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO STORAGE BIN");
            return;
        }
        await validarCamposTexto(2);
    }

    private async Task validarInitial()
    {
        //se hace otra validacion ya que los campos hasta este momento aun son modificables
        if (capturaAdicional == false)
        {
            if (materialNPTXT == "" && storageTXT == "")
            {
                Modal.Show("EXISTEN CAMPOS VACIOS", "PRECAUCION", Message.WARNING, Icon.WARNING);
                return;
            }
            var listInitialResultado = await InputsDataService.GetInitialLoadMaterialxStorageAsync(peridoActual.id, materialNPTXT, storageTXT);
            List<InitialLoadDTO> filtrolistInitialResultado = new List<InitialLoadDTO>();
            if (listInitialResultado is not null || listInitialResultado!.Count() > 0)
                filtrolistInitialResultado = listInitialResultado!.Where(X => X.estado == "PENDIENTE").ToList();
            // listInitialResultado = listInitial.Where(x => x.storage_bin == storageTXT).Where(y => y.material_number == materialNPTXT).Where(z => z.fkPeriodo == peridoActual.id).ToList();

            if (filtrolistInitialResultado.Count() == 0)
            {
                enableAdicional = true;
                enableMaterial = true;
                enableStorage = true;
            }
            else
            {
                enableGuardado = true;

                enableMaterial = true;
                enableStorage = true;
            }
        } else
        {
            material = listMaterial.Where(item => item.materialID == materialNPTXT).FirstOrDefault()!;
            storage = listStorage.Where(item => item.storagebin == storageTXT).FirstOrDefault()!;
            if (material is null && storage is null)
            {
                materialNPTXT = "";
                storageTXT = "";
                Modal.Show("NUMERO DE PARTE Y STORAGE BIN NO EXISTEN", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO NUMERO DE PARTE Y STORAGE BIN");
                return;
            }
            if (material is null)
            {
                materialNPTXT = "";
                Modal.Show("NUMERO DE PARTE NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO NUMERO DE PARTE");
                return;
            }
            if (storage is null)
            {
                storageTXT = "";
                Modal.Show("STORAGE BIN NO EXISTE", "PRECAUCION", Message.WARNING, Icon.WARNING, "INGRESA UN NUEVO STORAGE BIN");
                return;
            }

            enableGuardado = true;

            enableMaterial = true;
            enableStorage = true;
        }
    }

    //Actualiza la vista, recargando los datos por el metodo OnInitializedAsync()
    private void refresh()
    {
        NavManager.NavigateTo("home");
        NavManager.NavigateTo("registro");
    }


    //valida si la cantidad registrada por el usuario es un entero
    private async Task BuscaFolio()
    {
        bool esNumerico = Int32.TryParse(cantidad, out int cantidadINT);
        if (esNumerico == false)
        {
            Modal.Show("CANTIDAD INVALIDA", "ERROR", Message.ERROR, Icon.ERROR);
            return;
        }
        if (cantidadINT <= 0)
        {
            Modal.Show("CANTIDAD INVALIDA", "ERROR", Message.ERROR, Icon.ERROR);
            return;
        }
        // seguroGuardar = true;
        await Guardado(); // la venatana de seguridad de guardado esta arriba un renglon arriba de este
        //debe aplicarse cuando solo sea una captura manual
    }

    //METODO DE GUARDADO
    private async Task Guardado()
    {
        Loading.Show();
        List<InitialLoadDTO> filtrolistInitialResultado = new List<InitialLoadDTO>();
        if (!capturaAdicional)
        {
            var listInitialResultado = await InputsDataService.GetInitialLoadMaterialxStorageAsync(peridoActual.id, materialNPTXT, storageTXT);
            if (listInitialResultado is not null || listInitialResultado!.Count() > 0)
                filtrolistInitialResultado = listInitialResultado!.Where(X => X.estado == "PENDIENTE").ToList();
            folio = filtrolistInitialResultado[0].folio!;
            InitialLoadDTO updateInitial = filtrolistInitialResultado[0];
            updateInitial.folio = folio;
            updateInitial.estado = "CONTADO";

            //  1.Cambiar el estado de "PENDIENTE" a "CONTADO" en la tabla de 'saldos_iniciales'
            string result2 = await InputsDataService.UpdateInitialLoadEstadoAsync(updateInitial);
            if (result2 == "Error")
            {
                Modal.Show("ERROR AL GENERAR FOLIOS", "ERROR", Message.ERROR, Icon.ERROR);
                Loading.Hide();
                return;
            }
            bool esNumerico = Int32.TryParse(cantidad, out int cantidadINT);

            ReporteDTO reporte = new ReporteDTO
                {
                    folio = folio,
                    periodo = peridoActual.periodo,
                    estado = "PRECARGADO",
                    storage_bin = filtrolistInitialResultado[0].storage_bin,
                    storage_type = filtrolistInitialResultado[0].storage_type,
                    material_number = filtrolistInitialResultado[0].material_number,
                    material_descripcion = filtrolistInitialResultado[0].material_description,
                    unit_standard_cost = filtrolistInitialResultado[0].unit_standard_cost,
                    cantidad_inicial = filtrolistInitialResultado[0].total_quantity,
                    cantidad_contada = cantidadINT,
                    diferencia_cantidad = cantidadINT - filtrolistInitialResultado[0].total_quantity,
                    // porcentaje_diferencia = (((cantidadINT - filtrolistInitialResultado[0].total_quantity) * 100) / filtrolistInitialResultado[0].total_quantity),
                    porcentaje_diferencia = (1 - (Math.Abs(cantidadINT - filtrolistInitialResultado[0].total_quantity) / filtrolistInitialResultado[0].total_quantity)) * 100, //formula para PORCENTAJE DE CONFIABILIDAD
                    importe_inicial = filtrolistInitialResultado[0].total_cost,

                    importe_contada = ((cantidadINT * filtrolistInitialResultado[0].total_cost) / filtrolistInitialResultado[0].total_quantity),
                    diferencia_importe = ((cantidadINT * filtrolistInitialResultado[0].total_cost) / filtrolistInitialResultado[0].total_quantity) - filtrolistInitialResultado[0].total_cost,
                    porcentaje_variacion_importe = ((((cantidadINT * filtrolistInitialResultado[0].total_cost) / filtrolistInitialResultado[0].total_quantity) - filtrolistInitialResultado[0].total_cost) * 100) / filtrolistInitialResultado[0].total_quantity,
                    usuario = usuario,
                    periodoConsecutivo = peridoActual.consecutivo
                };

            //  2.Insertar en la nueva tabla el registro del folio, cantidad, comparativa y
            string result3 = await InputsDataService.InsertReporteAsync(reporte);
            if (result3 == "Error")
            {
                Modal.Show("ERROR AL GENERAR GUARDAR NUEVO REGISTRO", "ERROR", Message.ERROR, Icon.ERROR);
                Loading.Hide();
                return;
            }               


            Loading.Hide();
            seguroGuardar = false;
            folio = string.Empty;
            refresh();
        } else
        {

            //  REALIZAR UN FOLIO A(periodo)-(consecutivo), este consuecutivo se debe consultar desde la tabla nueva
            string[] conPeriodo = peridoActual.periodo!.Split("-");
            List<ReporteDTO> listRegistros = await InputsDataService.GetReportePorPeriodoAsync(peridoActual.periodo!);
            if(listRegistros.Count() != 0)
            {
                //  Hacer una consulta con la tabla nueva, con los registros que inician con A y obtener el ultimo digito para agregarle 1
                var registrosConA = listRegistros.Where(x => x.folio != null && x.folio.Contains("A")).Where(y => y.folio.Contains("P" + peridoActual.consecutivo + ""))
                    .OrderByDescending(item => item.id).FirstOrDefault();
                if (registrosConA is not null)
                {
                    string[] conFolio = registrosConA.folio!.Split("-");
                    folio = conFolio[0] + "-" + (int.Parse(conFolio[1]) + 1);
                } else
                {
                    folio = "A" + conPeriodo[0] + conPeriodo[1] + "P" + peridoActual.consecutivo + "-" + 1;
                }
            } else
            {
                folio = "A" + conPeriodo[0] + conPeriodo[1] + "P" + peridoActual.consecutivo + "-" + 1;
            }
            bool esNumerico = Int32.TryParse(cantidad, out int cantidadINT);
            ReporteDTO reporte = new ReporteDTO
                {
                    folio = folio,
                    periodo = peridoActual.periodo,
                    estado = "ADICIONAL",
                    storage_bin = storage.storagebin,
                    storage_type = storage.storagetype,
                    material_number = material.materialID,
                    material_descripcion = material.descripcion,
                    unit_standard_cost = material.unit_price,
                    cantidad_inicial = 0,
                    cantidad_contada = cantidadINT,
                    diferencia_cantidad = cantidadINT,
                    porcentaje_diferencia = 0,
                    importe_inicial = 0,
                    importe_contada = material.unit_price * cantidadINT,
                    diferencia_importe = 0,
                    porcentaje_variacion_importe = 0,
                    usuario = usuario,
                    periodoConsecutivo = peridoActual.consecutivo
                };

            // Insertar en la nueva tabla el registro del folio
            string result3 = await InputsDataService.InsertReporteAsync(reporte);
            if (result3 == "Error")
            {
                Modal.Show("ERROR AL GENERAR GUARDAR NUEVO REGISTRO", "ERROR", Message.ERROR, Icon.ERROR);
                Loading.Hide();
                return;
            }

            Loading.Hide();
            seguroGuardar = false;

            refresh();
        }

    }
}
